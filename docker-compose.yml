version: "3.9"

services:
  auth_postgres:
    image: postgres:15
    container_name: auth_postgres
    networks:
      - auth_network
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: joaountura
      POSTGRES_PASSWORD: joaountura@dev
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U joaountura -d auth_db"]
      interval: 5s
      retries: 20
      timeout: 5s

  redis_auth:
    image: redis:8.0.3
    container_name: redis_auth
    networks:
      - auth_network
    ports:
      - "6380:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      retries: 20
      timeout: 5s

  spring:
    image: joaountura/auth-project:latest
    container_name: spring
    networks:
      - auth_network
    ports:
      - "8080:8080"
    volumes:
      - ./logs:/logs
    environment:
      SPRING_REDIS_HOST: redis_auth
      SPRING_REDIS_PORT: 6380
      SPRING_DATASOURCE_URL: jdbc:postgresql://auth_postgres:5432/auth_db
      LOGGING_FILE_NAME: /logs/app.log
      SERVER_ADDRESS: 0.0.0.0
    depends_on:
      auth_postgres:
        condition: service_healthy
      redis_auth:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 5s
      retries: 20
      timeout: 5s

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.0
    container_name: elasticsearch
    networks:
      - auth_network
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200 || exit 1"]
      interval: 5s
      retries: 20
      timeout: 5s

  kibana:
    image: docker.elastic.co/kibana/kibana:8.14.0
    container_name: kibana
    networks:
      - auth_network
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    volumes:
      - kibana_data:/usr/share/kibana/data
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601 || exit 1"]
      interval: 5s
      retries: 20
      timeout: 5s

  logstash:
    image: docker.elastic.co/logstash/logstash:8.14.0
    container_name: logstash
    networks:
      - auth_network
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./logs:/usr/share/logstash/logs
    ports:
      - "5000:5000"
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 5000 || exit 1"]
      interval: 5s
      retries: 20
      timeout: 5s

  kong:
    image: kong:3.6
    container_name: kong
    networks:
      - auth_network
    restart: always
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /etc/kong/kong.yaml
      KONG_PROXY_LISTEN: "0.0.0.0:8000, 0.0.0.0:80, 0.0.0.0:443 ssl"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
    ports:
      - "8000:8000"
      - "80:80"
      - "443:443"
      - "8001:8001"
    volumes:
      - ./kong.yaml:/etc/kong/kong.yaml:ro
    depends_on:
      spring:
        condition: service_healthy
      kibana:
        condition: service_healthy
      logstash:
        condition: service_healthy

volumes:
  postgres_data:
  es_data:
  kibana_data:

networks:
  auth_network:
    driver: bridge
